
datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  idUsuario          Int                @id @default(autoincrement())
 
  tipoUsuario        UsuarioTipo
  email              String             @unique
  password           String
  nombreCompleto     String
  nombreEmpresa      String?
  telefono           String
  direccion          String
  infoEmpresa        String?
  verificado         Boolean
  fotoPerfil         String?
  isActive           Boolean
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  role               UserRole           @default(USER)

  likesEmitidos      Like[]             @relation("LikesEmitidos")
  likesRecibidos     Like[]             @relation("LikesRecibidos")
  telefonos          Telefono[]
  direcciones        Direccion[]
  vendedorProductos  VendedorProducto[]
  compradorProductos CompradorProducto[]
  inventarios        Inventario[]
  productosInteres   ProductoInteres[]
  ordenesComprador   Orden[]            @relation("OrdenesComprador")
  ordenesVendedor    Orden[]            @relation("OrdenesVendedor")
}
enum UsuarioTipo {
  COMPRADOR
  VENDEDOR
  AMBOS
}

model Like {
  iLike             Int     @id @default(autoincrement())
  idUsuarioEmisor   Int
  idUsuarioReceptor Int
  tipoReaccion      TipoReaccion
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  usuarioEmisor     Usuario @relation("LikesEmitidos", fields: [idUsuarioEmisor], references: [idUsuario])
  usuarioReceptor   Usuario @relation("LikesRecibidos", fields: [idUsuarioReceptor], references: [idUsuario])
}

enum TipoReaccion {
  LIKE
  DISLIKE
}

model Telefono {
  idTelefono     Int      @id @default(autoincrement())
  idUsuario      Int
  numero         String
  tipo           String   // m√≥vil, casa, oficina, etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  usuario        Usuario  @relation(fields: [idUsuario], references: [idUsuario])

}

model Direccion {
  idDireccion     Int      @id @default(autoincrement())
  idUsuario       Int
  calle           String
  ciudad          String
  estado          String
  codigoPostal    String
  pais            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  usuario         Usuario  @relation(fields: [idUsuario], references: [idUsuario])
  
}

model Producto {
  idProducto        Int     @id @default(autoincrement())
  idCategoria       Int
  nombre            String
  imagen            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  categoria         Categoria @relation(fields: [idCategoria], references: [idCategoria])
  vendedorProductos VendedorProducto[]
  compradorProductos CompradorProducto[]
  inventarios       Inventario[]
  productosInteres  ProductoInteres[]
  ordenes           Orden[]
}

model Categoria {
  idCategoria       Int     @id @default(autoincrement())
  nombre            String
  descripcion       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  productos         Producto[]
  subcategorias     Subcategoria[]
}

model Subcategoria {
  idSubcategoria    Int      @id @default(autoincrement())
  idCategoria       Int
  nombre            String
  descripcion       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  categoria         Categoria  @relation(fields: [idCategoria], references: [idCategoria])
  vendedorProductos VendedorProducto[]
  compradorProductos CompradorProducto[]
  ordenes           Orden[]
  Inventario Inventario[]
  ProductoInteres ProductoInteres[]
}

model VendedorProducto {
  idVendedorProducto Int     @id @default(autoincrement())
  idUsuario          Int
  idProducto         Int
  idSubcategoria     Int
  precioxTN          Decimal  @db.Decimal(10, 2)
  ubicacion          String
  statusEmpresa      String
  cantidadDisponible String
  descripcion        String?
  foto               String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  producto           Producto    @relation(fields: [idProducto], references: [idProducto])
  subcategoria       Subcategoria @relation(fields: [idSubcategoria], references: [idSubcategoria])
  usuario            Usuario     @relation(fields: [idUsuario], references: [idUsuario])
}

model CompradorProducto {
  idCompradorProducto Int     @id @default(autoincrement())
  idUsuario           Int
  idProducto          Int
  idSubcategoria      Int
  cantidadRequerida   Decimal  @db.Decimal(10, 2)
  precioMax           Decimal  @db.Decimal(10, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  producto            Producto    @relation(fields: [idProducto], references: [idProducto])
  subcategoria        Subcategoria @relation(fields: [idSubcategoria], references: [idSubcategoria])
  usuario             Usuario     @relation(fields: [idUsuario], references: [idUsuario])
}

model Inventario {
  idInventario        Int     @id @default(autoincrement())
  idUsuario           Int
  idProducto          Int
  idSubcategoria      Int
  cantidad            Decimal  @db.Decimal(10, 2)
  unidadMedida        UnidadMedida
  costoxUnidad        Decimal  @db.Decimal(10, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  producto            Producto  @relation(fields: [idProducto], references: [idProducto])
  subcategoria        Subcategoria @relation(fields: [idSubcategoria], references: [idSubcategoria])
  usuario             Usuario   @relation(fields: [idUsuario], references: [idUsuario])
}

enum UnidadMedida {
  TONELADA
  UNIDADES
}

model ProductoInteres {
  idInteres          Int     @id @default(autoincrement())
  idProducto         Int
  idUsuario          Int
  idSubcategoria     Int
  precioMax          Decimal  @db.Decimal(10, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  producto           Producto  @relation(fields: [idProducto], references: [idProducto])
  subcategoria        Subcategoria @relation(fields: [idSubcategoria], references: [idSubcategoria])
  usuario            Usuario   @relation(fields: [idUsuario], references: [idUsuario])
}

model Orden {
  idOrden            Int     @id @default(autoincrement())
  idComprador        Int
  idVendedor         Int
  idProducto         Int
  idSubcategoria     Int
  tipoOrden          TipoOrden
  precio             Decimal  @db.Decimal(10, 2)
  status             EstadoOrden
  fechaAcordada      String
  descripcion        String?
  fotoProducto       String?
  direccion          String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  comprador          Usuario  @relation("OrdenesComprador", fields: [idComprador], references: [idUsuario])
  vendedor           Usuario  @relation("OrdenesVendedor", fields: [idVendedor], references: [idUsuario])
  producto           Producto @relation(fields: [idProducto], references: [idProducto])
  subcategoria       Subcategoria @relation(fields: [idSubcategoria], references: [idSubcategoria])
}

enum TipoOrden {
  COMPRA
  VENTA
}

enum EstadoOrden {
  PENDIENTE
  EXITOSO
  FALLIDO
  CANCELADO
}

model PasswordReset {
  id                Int       @id @default(autoincrement())
  email             String
  token             String
  expiresAt         DateTime
  createdAt         DateTime   @default(now())
}

enum UserRole {
  ADMIN
  USER
}

model UserAdmin {
  id                Int       @id @default(autoincrement())
  nombre            String
  email             String    @unique
  password          String
  isActive          Boolean   @default(true)
  role              UserRole  @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
